import _pickle as pickle
import numpy as np
import tensorflow as tf

# treeFile = './resource/build_trees.level5.pk'
# treeMap = pickle.load(open(treeFile, 'rb'))
# ancestors = np.array(list(treeMap.values())).astype(np.int32)
# ancSize = ancestors.shape[1]
# leaves = []
# for k in treeMap.keys():
#     leaves.append([k] * ancSize)
# leaves = np.array(leaves).astype(np.int32)

# tparams = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
# leaves = np.array([0, 0, 0, 0])
# ancestors = np.array([0, 1, 0, 2])
# a = [tparams[leaves], tparams[ancestors]]
# b = tf.keras.layers.concatenate(a, axis=1)


def intersection(nums1, nums2):
    return list(set(nums1) & set(nums2))

a = [(101, 109, 54, 104, 52, 111, 58, 159, 134, 259, 48, 240, 1, 261, 141, 160, 47, 99, 125, 102, 277, 157, 153, 98, 130, 2, 71, 161, 239, 77)]
# a1 = [(111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121), (111, 160, 109, 58, 159, 54, 101, 134, 52, 102, 261, 157, 104, 1, 240, 125, 47, 98, 259, 161, 130, 239, 141, 277, 99, 120, 2, 48, 278, 121)]
# b = [32, 165, 41, 47, 84, 157]

# print(intersection(a,b))